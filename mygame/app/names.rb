# Names!
# Most characters are human
# Some are alien
# Some are drones/robots
module Names
module Human
  # First names that are 'feminine'
  First_feminine = [
    "alice",
    "alura",
    "amalthea",
    "artemis",
    "athena",
    "buffy",
    "buns",
    "cammy",
    "carmen",
    "chun-li",
    "daisy",
    "dana",
    "diana",
    "dora",
    "elise",
    "flora",
    "foxy",
    "inara",
    "inez",
    "iris",
    "jessica",
    "laureline",
    "luna",
    "maggie",
    "mama",
    "marge",
    "maria",
    "mary",
    "mina",
    "miri",
    "motoko",
    "natalie",
    "nyx",
    "seren",
    "stella",
    "valerie",
    "victoria",
  ]

  # First names that are 'masculine'
  First_masculine = [
    "ahmad",
    "alan",
    "andrew",
    "anubis",
    "apollo",
    "ares",
    "arman",
    "atlas",
    "bart",
    "bill",
    "bob",
    "bruno",
    "charon",
    "cliffy",
    "deimos",
    "dick",
    "fidel",
    "frank",
    "griffin",
    "guile",
    "hamato",
    "hector",
    "helios",
    "helmut",
    "heracles",
    "homer",
    "ivan",
    "jean-luc",
    "joe",
    "justin",
    "karl",
    "keith",
    "ken",
    "kratos",
    "lance",
    "larry",
    "liu",
    "luigi",
    "luke",
    "mario",
    "moe",
    "mohamed",
    "morpheus",
    "neil",
    "nikola",
    "oroku",
    "osiris",
    "papa",
    "patrick",
    "pham",
    "poseidon",
    "ramon",
    "reuben",
    "richard",
    "ryu",
    "ryuji",
    "travis",
    "valerian",
    "vinny",
    "warren",
    "xavier",
    "yoshi",
  ]

  # First names suitable for anyone
  First_universal = [
    "adi",
    "aku",
    "axton",
    "biff",
    "billie",
    "bo",
    "brain",
    "bubs",
    "buzz",
    "cam",
    "carp",
    "cougar",
    "curly",
    "dyno",
    "echo",
    "ender",
    "era",
    "gai",
    "gari",
    "gimmo",
    "hamous",
    "haywire",
    "hupu",
    "hurl",
    "ice",
    "iggy",
    "it",
    "jean",
    "jon",
    "kaboom",
    "kunteus",
    "leslie",
    "lucky",
    "lupu",
    "lynx",
    "maddog",
    "magic",
    "malice",
    "mouse",
    "murray",
    "nails",
    "numb",
    "odie",
    "pat",
    "pluto",
    "polaro",
    "raffi",
    "raider",
    "raven",
    "raiden",
    "razor",
    "reaper",
    "red",
    "roid",
    "rudy",
    "sami",
    "scope",
    "scope",
    "scream",
    "shadow",
    "shank",
    "sidney",
    "skitz",
    "snake",
    "spam",
    "speck",
    "spider",
    "spike",
    "stogie",
    "tex",
    "toad",
    "truxton",
    "tupu",
    "turtle",
    "vega",
    "vic",
    "wilias",
    "wolf",
    "neo"
  ]

  # Last names used as-is (or combined Lastname-Lastname)
  Last_complete = [
    "adams",
    "ahmed",
    "andromeda",
    "bean",
    "bird",
    "bison",
    "boyden",
    "bravo",
    "chang",
    "chen",
    "chung",
    "dadd",
    "derdersson",
    "drago",
    "ellis",
    "gaiman",
    "garcia",
    "garfield",
    "gold",
    "gu",
    "hassan",
    "huang",
    "jerusalem",
    "kang",
    "kusanagi",
    "laffer",
    "li",
    "lincoln",
    "ling",
    "lovejoy",
    "mars",
    "moffat",
    "moore",
    "muller",
    "mulder",
    "nemo",
    "nuwen",
    "o\'Brien",
    "o\'Neill",
    "onyx",
    "park",
    "picard",
    "postman",
    "potter",
    "rizer",
    "roachburn",
    "santiago",
    "saki",
    "saturn",
    "scully",
    "song",
    "tannen",
    "walker",
    "wallis",
    "wang",
    "zhang",
    "liu",
  ]

  # Stems that may be used in first or last names
  Syllable = [
    "air",
    "an",
    "as",
    "ball",
    "be",
    "bel",
    "ben",
    "bi",
    "bif",
    "bin",
    "bix",
    "bo",
    "bon",
    "ca",
    "chel",
    "co",
    "co",
    "cop",
    "cost",
    "de",
    "den",
    "der",
    "don",
    "el",
    "eri",
    "fart",
    "ga",
    "go",
    "gon",
    "goo",
    "good",
    "grif",
    "har",
    "ho",
    "home",
    "hut",
    "jay",
    "jor",
    "joy",
    "jus",
    "kal",
    "kar",
    "key",
    "kim",
    "kin",
    "ko",
    "la",
    "la",
    "lake",
    "lan",
    "lar",
    "len",
    "lix",
    "love",
    "ma",
    "mo",
    "mul",
    "nac",
    "ne",
    "ner",
    "nes",
    "obi",
    "pa",
    "pan",
    "per",
    "rix",
    "rom",
    "sal",
    "scat",
    "ser",
    "shat",
    "sim",
    "simp",
    "sky",
    "star",
    "sus",
    "tar",
    "te",
    "tek",
    "tic",
    "tin",
    "to",
    "toe",
    "ton",
    "us",
    "vau",
    "vis",
    "win",
    "zai",
    "ze",
    "zee",
    "zo",
  ]

  # stems that only work at the end
  Last_suffix = [
    "bopper",
    "burn",
    "cault",
    "city",
    "field",
    "gard",
    "gas",
    "ger",
    "goon",
    "gos",
    "gus",
    "ham",
    "heur",
    "house",
    "kind",
    "ler",
    "man",
    "mooner",
    "nen",
    "ner",
    "oid",
    "pickle",
    "river",
    "runner",
    "shrek",
    "ski",
    "smith",
    "sson",
    "us",
    "vic",
    "ville",
    "walker",
    "year",
  ]

  #van, los, dos, le, bin, O', Mc

  # Generate a perfectly normal human name
  # returns two values: shortname, lastname
  # genders are :gender_universal, :gender_feminine, :gender_masculine
  # genders only matter for some portraits, and some non-procedural names
  def Human.generate gender = nil
    if !gender
      gender = [GENDER_UNIVERSAL, GENDER_FEMININE, GENDER_MASCULINE].random_element()
    end
    generate_firstname = rand < 0.5
    generate_lastname = rand < 0.5

    firstname = ""
    if generate_firstname
      num_syllables = 2
      num_syllables.times do
        firstname << Syllable.random_element()
      end
    else #pick pregen'd
      case gender
      when GENDER_UNIVERSAL
        firstname = First_universal.random_element()
      when GENDER_FEMININE
        firstname = First_feminine.random_element()
      when GENDER_MASCULINE
        firstname = First_masculine.random_element()
      end
    end

    lastname = ""
    if generate_lastname
      num_syllables = [1,2,3].random_element()
      num_syllables.times do
        lastname << Syllable.random_element()
      end
      if num_syllables < 3 and rand < 0.5
        lastname << Last_suffix.random_element()
      end
    else #pick pregen'd
      lastname = Last_complete.random_element()
    end

    firstname.capitalize!
    lastname.capitalize!
    return firstname, lastname
  end
end #module Human

module Mission
  def Mission.generate
    stem_first = [
      "blue",
      "bone",
      "bright",
      "brutal",
      "chocolate",
      "cyber",
      "dark",
      "electric",
      "elegant",
      "extreme",
      "fire",
      "green",
      "heaven",
      "hell",
      "ice",
      "poor",
      "quiet",
      "red",
      "rich",
      "screaming",
      "secret",
      "snake",
      "sneak",
      "violent",
      "virtuous",
      "whispering",
    ]

    stem_last = [
      "assault",
      "castle",
      "climber",
      "cloud",
      "descent",
      "dragon",
      "eagles",
      "fist",
      "force",
      "gauntlet",
      "giants",
      "heroes",
      "king",
      "knights",
      "machine",
      "queen",
      "shadow",
      "storm",
      "thunder",
      "warriors",
    ]

    first = stem_first.random_element().capitalize
    last  = stem_last.random_element().capitalize

    return first + " " + last
  end
end
end #module Names

# Drone names
#module Names::Robot
#end
